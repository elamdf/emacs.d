#+TITLE: Elam's =emacs= Configuration
#+AUTHOR: Elam Day-Friedland

* Startup & UI Basics
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (shell-command "git submodule update --init")
  (when (display-graphic-p)
    (setq visible-bell t)                 ; no audible bell
    (setq split-width-threshold 1)        ; prefer vertical splits
    (scroll-bar-mode -1)                  ; hide scroll bar
    (tool-bar-mode   -1)                  ; hide toolbar
    (tooltip-mode   -1)                   ; hide tooltips
    (set-fringe-mode 10)                  ; extra margin
    (menu-bar-mode   -1)                  ; hide menu bar
    (defvar my/fixed-width-font  "Fira Code Retina"
      "The font to use for monospaced (fixed width) text.")
    (defvar my/variable-width-font "Iosevka Aile"
      "The font to use for variable-pitch (document) text.")
    (set-face-attribute 'default nil :font my/fixed-width-font :height 140))

#+END_SRC

#+RESULTS:

* Personal Modules & Paths
#+BEGIN_SRC emacs-lisp
  ;; Load personal machine‑specific tweaks
  (load (concat user-emacs-directory "elam-personal-mac.el"))
  ;; Private libraries
  (add-to-list 'load-path (concat user-emacs-directory "/lisp"))

  (add-to-list 'load-path (concat user-emacs-directory "/bismuth"))
  (require 'user)                         ; personal helpers
(require 'typewriter-mode)
#+END_SRC
* Package Management
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let\* ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el"
                                            (or (bound-and-true-p straight-base-dir)
                                                user-emacs-directory)))
          (bootstrap-version 7))
         (unless (file-exists-p bootstrap-file)
           (with-current-buffer
               (url-retrieve-synchronously
                "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
                'silent 'inhibit-cookies)
             (goto-char (point-max))
             (eval-print-last-sexp)))
         (load bootstrap-file nil 'nomessage))
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
  (load-library "server")
  (unless (server-running-p) (server-start))
  (unless (package-installed-p 'use-package) (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t
        package-install-upgrade-built-in t)
#+END_SRC
* Core Editor Defaults
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
  (which-key-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
  (setq switch-to-buffer-obey-display-actions t)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
  (use-package command-log-mode)
  ;; Disable line numbers where they get in the way
  (dolist (hook '(org-mode-hook term-mode-hook shell-mode-hook treemacs-mode-hook eshell-mode-hook))
    (add-hook hook (lambda () (display-line-numbers-mode 0))))

#+END_SRC
* UI, Completion & Navigation
#+BEGIN_SRC emacs-lisp
  (use-package company)
  (use-package doom-themes :init (load-theme 'doom-palenight t))
  (use-package doom-modeline :init (doom-modeline-mode 1) :custom ((doom-modeline-height 25)))
  (setq mac-command-modifier 'meta)
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
  (setq-default indent-tabs-mode nil)
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map ("C-c C-e" . markdown-do)))
  (defun elamdf/markdown-no-comment-start ()
    (setq-local comment-start nil))
  (add-hook 'markdown-mode-hook #'elamdf/markdown-no-comment-start)

  ;; casual
  (use-package general)
  (use-package casual ;; A collection of  user interfaces for various built-in Emacs modes.
    :config
    (require 'casual-calc)
    (require 'casual-dired)
    (require 'casual-agenda)
    (require 'casual-image)
    (require 'casual-ibuffer)
    (require 'casual-info)
    (require 'casual-make)
    :general
    (:keymaps 'org-agenda-mode-map "C-o" 'casual-agenda-tmenu)
    (:keymaps 'bookmark-bmenu-mode-map "C-o" 'casual-bookmarks-tmenu)
    (:keymaps 'calc-mode-map "C-o" 'casual-calc-tmenu)
    (:keymaps 'dired-mode-map "C-o" 'casual-dired-tmenu)
    (:keymaps 'make-mode-map "C-o" 'casual-make-tmenu)
    (:keymaps 'Info-mode-map "C-o" 'casual-info-tmenu))

#+END_SRC


* Completion
#+begin_src emacs-lisp
  (use-package vertico
    :demand t                             ; Otherwise won't get loaded immediately
    :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                       :includes (vertico-indexed
                                  vertico-flat
                                  vertico-grid
                                  vertico-mouse
                                  vertico-quick
                                  vertico-buffer
                                  vertico-repeat
                                  vertico-reverse
                                  vertico-directory
                                  vertico-multiform
                                  vertico-unobtrusive))
    :general
    (:keymaps '(normal insert visual motion)
              "M-." #'vertico-repeat)
    (:keymaps 'vertico-map
              "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
              "<escape>" #'minibuffer-keyboard-quit
              "?" #'minibuffer-completion-help
              "C-M-n" #'vertico-next-group
              "C-M-p" #'vertico-previous-group
              ;; Multiform toggles
              "<backspace>" #'vertico-directory-delete-char
              "C-w" #'vertico-directory-delete-word
              "C-<backspace>" #'vertico-directory-delete-word
              "RET" #'vertico-directory-enter
              "C-i" #'vertico-quick-insert
              "C-o" #'vertico-quick-exit
              "M-o" #'kb/vertico-quick-embark
              "M-G" #'vertico-multiform-grid
              "M-F" #'vertico-multiform-flat
              "M-R" #'vertico-multiform-reverse
              "M-U" #'vertico-multiform-unobtrusive
              "C-l" #'kb/vertico-multiform-flat-toggle)
    :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
           (minibuffer-setup . vertico-repeat-save)) ; Make sure vertico state is saved
    :custom
    (vertico-count 13)
    (vertico-resize t)
    (vertico-cycle nil)
    ;; Extensions
    (vertico-grid-separator "       ")
    (vertico-grid-lookahead 50)
    (vertico-buffer-display-action '(display-buffer-reuse-window))
    (vertico-multiform-categories
     '((file reverse)
       (consult-grep buffer)
       (consult-location)
       (imenu buffer)
       (library reverse indexed)
       (org-roam-node reverse indexed)
       (t reverse)))
    (vertico-multiform-commands
     '(("flyspell-correct-*" grid reverse)
       (org-refile grid reverse indexed)
       (consult-yank-pop indexed)
       (consult-flycheck)
       (consult-lsp-diagnostics)))
    :init
    (defun kb/vertico-multiform-flat-toggle ()
      "Toggle between flat and reverse."
      (interactive)
      (vertico-multiform--display-toggle 'vertico-flat-mode)
      (if vertico-flat-mode
          (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
        (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
    (defun kb/vertico-quick-embark (&optional arg)
      "Embark on candidate using quick keys."
      (interactive)
      (when (vertico-quick-jump)
        (embark-act arg)))

    ;; Workaround for problem with `tramp' hostname completions. This overrides
    ;; the completion style specifically for remote files! See
    ;; https://github.com/minad/vertico#tramp-hostname-completion
    (defun kb/basic-remote-try-completion (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-try-completion string table pred point)))
    (defun kb/basic-remote-all-completions (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-all-completions string table pred point)))
    (add-to-list 'completion-styles-alist
                 '(basic-remote           ; Name of `completion-style'
                   kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
    :config
    (vertico-mode)
    ;; Extensions
    (vertico-multiform-mode)

    ;; Prefix the current candidate with “» ”. From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "» " 'face 'vertico-current)
                     "  ")
                   cand))))
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)    ; I want to be in control!
    (completion-category-overrides
     '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                     orderless
                     ))
       ))

    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       ;; orderless-flex
       ;; orderless-strict-leading-initialism
       ;; orderless-strict-initialism
       ;; orderless-strict-full-initialism
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-style-dispatchers
     '(prot-orderless-literal-dispatcher
       prot-orderless-strict-initialism-dispatcher
       prot-orderless-flex-dispatcher))
    :init
    (defun orderless--strict-*-initialism (component &optional anchored)
      "Match a COMPONENT as a strict initialism, optionally ANCHORED.
  The characters in COMPONENT must occur in the candidate in that
  order at the beginning of subsequent words comprised of letters.
  Only non-letters can be in between the words that start with the
  initials.

  If ANCHORED is `start' require that the first initial appear in
  the first word of the candidate.  If ANCHORED is `both' require
  that the first and last initials appear in the first and last
  words of the candidate, respectively."
      (orderless--separated-by
          '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
        (cl-loop for char across component collect `(seq word-start ,char))
        (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
        (when (eq anchored 'both)
          '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

    (defun orderless-strict-initialism (component)
      "Match a COMPONENT as a strict initialism.
  This means the characters in COMPONENT must occur in the
  candidate in that order at the beginning of subsequent words
  comprised of letters.  Only non-letters can be in between the
  words that start with the initials."
      (orderless--strict-*-initialism component))

    (defun prot-orderless-literal-dispatcher (pattern _index _total)
      "Literal style dispatcher using the equals sign as a suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "=" pattern)
        `(orderless-literal . ,(substring pattern 0 -1))))

    (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
      "Leading initialism  dispatcher using the comma suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "," pattern)
        `(orderless-strict-initialism . ,(substring pattern 0 -1))))

    (defun prot-orderless-flex-dispatcher (pattern _index _total)
      "Flex  dispatcher using the tilde suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "." pattern)
        `(orderless-flex . ,(substring pattern 0 -1)))))

  (use-package consult)

#+end_src

#+RESULTS:

* Project & Version Control
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom (projectile-completion-system 'default)
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (setq projectile-project-search-path '("~/bwrc" "~/Documents"))
    (setq projectile-switch-project-action #'projectile-dired))
  (use-package consult-projectile
    :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))
  (use-package magit :commands magit-status)
  (use-package forge :after magit)
  (use-package pr-review :after magit)
  (setq auth-sources '("\~/.authinfo"))
  ;; make sure things are available on PATH
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC



* Language & LSP Support
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init   (setq lsp-keymap-prefix "C-c l")
    :config (lsp-enable-which-key-integration t))
  (use-package lsp-ui :commands lsp-ui-mode)
  (add-hook 'python-mode-hook #'lsp-deferred)
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (use-package yaml-mode)
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  (use-package rust-mode
    :mode "\\.rs\\'"
    :custom (rust-format-on-save t)
    :hook (rust-mode . lsp-deferred))
  (use-package lsp-metals
    :custom
    (lsp-metals-server-args
     '("-J-Dmetals.allow-multiline-string-formatting=off"
       "-J-Dmetals.icons=unicode"))
    (lsp-metals-enable-semantic-highlighting t)
    :hook (scala-mode . lsp-deferred))
  (use-package calyx-mode
    :straight (calyx-mode :host github :repo "sgpthomas/calyx-mode"))
  ;; auto format python stuff
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))

  ;; flyover for prettier inline syntax checks
  (use-package flyover)
  (add-hook 'flycheck-mode-hook #'flyover-mode)
  ;; Use theme colors for error/warning/info faces
  (setq flyover-use-theme-colors t)

  ;; Adjust background lightness (lower values = darker)
  (setq flyover-background-lightness 45)

  ;; Make icon background darker than foreground
  (setq flyover-percent-darker 40)

  (setq flyover-text-tint 'lighter) ;; or 'darker or nil

  ;; "Percentage to lighten or darken the text when tinting is enabled."
  (setq flyover-text-tint-percent 50)
  (setq flyover-levels '(error warning))    ; Show only errors and warnings
#+END_SRC
Systemverilog stuff
#+begin_src emacs-lisp
  (use-package verilog-ext
    :hook ((verilog-mode . verilog-ext-mode))
    :init
    ;; Can also be set through `M-x RET customize-group RET verilog-ext':
    ;; Comment out/remove the ones you do not need
    (setq verilog-ext-feature-list
          '(font-lock
            xref
            capf
            hierarchy
            eglot
            lsp
            flycheck
            beautify
            navigation
            template
            formatter
            compilation
            imenu
            which-func
            hideshow
            typedefs
            time-stamp
            block-end-comments
            ports))
    :config
    (verilog-ext-mode-setup))

#+end_src

* Org Mode Configuration

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ▾"
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-fontify-quote-and-verse-blocks t)
  (add-hook 'org-mode-hook #'org-indent-mode)
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (shell . t)))
  (setq org-directory projects-dir)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (use-package org-tempo :ensure nil :demand t)
  (dolist (tpl '(("sh" . "src sh")
                 ("el" . "src emacs-lisp")
                 ("li" . "src lisp")
                 ("sc" . "src scheme")
                 ("ts" . "src typescript")
                 ("py" . "src python")
                 ("yaml" . "src yaml")
                 ("json" . "src json")))
    (add-to-list 'org-structure-template-alist tpl))
  (setq org-deadline-warning-days 1
        org-use-fast-tag-selection t)
  (setq org-tag-alist '(("arch" . ?a) ("courses" . ?c) ("ic" . ?i) ("misc" . ?m) ("references" . ?r)))
  ;; Capture & Refile templates


  (use-package fold-and-focus
    :demand t
    :straight (fold-and-focus :type git :host nil :repo
                              "https://git.sr.ht/~flandrew/fold-and-focus")
    :config
    (global-fold-and-focus-org-mode)
    (global-fold-and-focus-md-mode)
    (global-fold-and-focus-el-mode))

  ;;
  (global-set-key (kbd "M-+") 'elamdf/org-word-count)
  (global-set-key (kbd "C-M-s") 'consult-line)
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)


#+end_src

* Org Capture bindings
#+begin_src emacs-lisp
      (setq org-capture-templates
            '(("r" "Read" entry
               (file+headline (lambda () (expand-file-name "notes.org" projects-dir)) "Reading List")
               "* READ %^{Title} by %^{Author} %^g: \n - Entered on %U\n  %?")


              ("w" "Watch" entry
               (file+headline  (lambda () (expand-file-name "notes.org" projects-dir)) "Watch List")
               ;; (file+headline (expand-file-name "capture.org" projects-dir) "Watch List")

               "* WATCH %^{Title} %^g:\n Link: %^{URL}\n  - Entered on %U\n  %?")

              ("t" "TODO" entry (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "TODO todos")
               "* TODO %U %i %?" :empty-lines-after 1)

              ("l" "Log" entry (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "Log")
               "* %U %i %?" :empty-lines-after 1)
              ("i" "Idea" entry (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "Ideas")
               "* IDEA %U %?" :empty-lines-after 1)
              ("s" "Quote" entry (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "Quotes")
               "* %U \"%i%?\"" :empty-lines-after 1)
              ("R" "Read from Zotero" entry (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "Reading List")
               "* READ %(elamdf/zotero-latest-capture-string)
      - Entered on %U
      %?" :empty-lines-after 1)
              ("e" "Elfeed article" entry
               (file+olp  (lambda () (expand-file-name "notes.org" projects-dir)) "Reading List")
               "* [[%:link][%:description]]
              :PROPERTIES:
              :LINK: %:link
              :AUTHOR: %:authors
              :END: \n%?" :empty-lines-after 1)))
      (defun elamdf/org-capture-elfeed ()
        (interactive)
        (org-capture nil "e"))
      (setq org-agenda-sorting-strategy
            '((agenda user-defined-up) (todo user-defined-up)
              (tags urgency-down category-keep) (search category-keep))
            )
      (setq org-agenda-cmp-user-defined 'elamdf/compare-todo-status)



      (setq org-refile-targets (mapcar (lambda (f) (cons f '(:maxlevel . 3))) (elamdf/org-project-files)))
      (use-package zotxt :after org)
      (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "WATCH(v)" "READ(r)" "|" "DONE(d!)" "CANCELED(c@)")))
      (setq org-todo-keyword-faces '(("READ" . "dark green") ("IDEA" . "white") ("WATCH" . "dark blue")))
      (setq org-src-fontify-natively t)
      (use-package htmlize)
      (setq org-export-publishing-directory "./assets")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

      (use-package ox-reveal) ; reveal js presentations!n
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-hide-emphasis-markers t)

#+END_SRC

#+RESULTS:
: t


* Keybindings & Shortcuts
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c ;")   #'replace-regexp)
  (define-key org-mode-map (kbd "C-c ;")   #'replace-regexp)
  ;; GPTel
  (global-set-key (kbd "C-c s") #'gptel-menu)
  (global-set-key (kbd "C-c g") #'gptel)
  ;; Org
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

  (global-set-key (kbd "C-c m") #'elamdf/create-meeting-notes-file)
  ;; Bismuth
  (global-set-key (kbd "C-c t") #'inline-cr-list-all-actionables)

  ;; elfeed
  (global-set-key (kbd "C-x w w") #'elfeed)

  ;; Disable arrow keys
  (dolist (k '("<left>" "<right>" "<up>" "<down>"))
    (global-unset-key (kbd k)))
  (use-package backward-forward
    :ensure t
    :demand t
    :config
    (backward-forward-mode t)
    :bind
    (:map backward-forward-mode-map
          ("<left>" . backward-forward-previous-location)
          ("<right>" . backward-forward-next-location)))
#+END_SRC

#+RESULTS:
: backward-forward-next-location


* Conda & Environment
#+BEGIN_SRC emacs-lisp
  (use-package conda)
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
#+END_SRC
* Tramp & Remote Editing
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :defer t
    :custom
    (tramp-default-method "ssh")
    (tramp-default-remote-shell "/bin/bash")
    (tramp-remote-path (append tramp-remote-path '(tramp-own-remote-path)))
    :config
    (add-to-list 'tramp-default-proxies-alist '(nil "\\\`root\\'" "/ssh:%h:")))
#+END_SRC
* Dired & File Management
#+BEGIN_SRC emacs-lisp
  (defun dw/dired-mode-hook ()
    (dired-hide-details-mode 1)
    (hl-line-mode 1))
  (use-package dired :ensure nil
    :bind (:map dired-mode-map ("b" . dired-up-directory))
    :config
    (setq dired-listing-switches "-alv"
          dired-omit-files "^\\..\*\~?\$"
          dired-dwim-target 'dired-dwim-target-next
          delete-by-moving-to-trash t))
  (add-hook 'dired-mode-hook #'dw/dired-mode-hook)
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  ;; Ripgrep everywhere
  (setq xref-search-program 'ripgrep
        grep-command "rg -nS --noheading")
#+END_SRC
* Snippets & Templates
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook ((text-mode prog-mode conf-mode snippet-mode) . yas-minor-mode)
    :init (setq yas-snippet-dirs (list (concat user-emacs-directory "/yasnippet-snippets/snippets"))))
  (yas-global-mode)
  ;; Auto‑jump out of snippets
  (defun yas/field-skip-once ()
    (ignore-errors (yas/next-field))
    (remove-hook 'post-command-hook #'yas/field-skip-once 'local))
  (defun yas/schedule-field-skip ()
    (add-hook 'post-command-hook #'yas/field-skip-once 'append 'local))
#+END_SRC
* GPTel & Ollama Integration
#+BEGIN_SRC emacs-lisp
  (use-package gptel)
  (setq gptel-model 'qwen3:4b
        gptel-backend (gptel-make-ollama "Qwen 3 4B" :host "localhost:11434" :stream t :models '(qwen3:4b)))
  (add-hook 'gptel-post-response-functions #'gptel-end-of-response)
  (add-hook 'gptel-before-send-hook       #'elamdf/ensure-ollama-running)
  (defun elamdf/advise-gptel-commands ()
    "Ensure Ollama is running before any \`gptel-' command."
    (dolist (sym (apropos-internal "^gptel-" 'commandp))
      (advice-add sym :before #'elamdf/ensure-ollama-running)))
  (elamdf/advise-gptel-commands)
#+END_SRC
* Bismuth Configuration
#+BEGIN_SRC emacs-lisp
  (require 'inline-cr)
  (require 'brain)
  ;; Enable inline‑cr in common prose modes
  (dolist (hook '(markdown-mode-hook org-mode-hook c-mode-hook))
    (add-hook hook #'inline-cr-mode))
#+END_SRC
* RSS & Elfeed
#+BEGIN_SRC emacs-lisp
      (use-package elfeed)
      (setq elfeed-feeds '("https://people.csail.mit.edu/rachit/post/atom.xml"
                           "https://semianalysis.com/feed/"
                           "http://yummymelon.com/devnull/feeds/tags/emacs.atom.xml"
                           "https://www.chinatalk.media/feed"
                           "https://geohot.github.io/blog/feed"
                           "https://www.sinification.com/feed"
                           "https://elam.day/post/atom.xml"
                           "https://irreal.org/blog/?feed=rss2"))

  (add-hook elfeed-search-mode #'(lambda () ((setq-local visual-fill-column-center-text t))))

  (define-key elfeed-show-mode-map (kbd "w") #'elamdf/org-capture-elfeed)
#+END_SRC

#+RESULTS:
: elamdf/org-capture-elfeed


* Miscellaneous
#+BEGIN_SRC emacs-lisp
  ;; Fun motivational quote when opening files
  (add-hook 'find-file-hook #'elamdf/show-random-org-quote)
  ;; Allow 'list-timers' command
  (put 'list-timers 'disabled nil)
#+END_SRC
* OS Config things
on macos, invoke scripts/capture.sh by creating an automator script and binding it (under keyboard -> shortcuts -> services -> general)
add to =~/.authinfo.gpg=
#+begin_src
machine <workspace>.slack.com  login token  password xoxc-…    # API token
machine <workspace>.slack.com  login cookie password "xoxd-…; d-s=…; lc=…"  # full cookie header

#+end_src

also run
#+begin_src bash
  defaults write org.gnu.Emacs AppleFontSmoothing -int 0
#+end_src
to get cleaner fonts


* External dependencies I remember adding
=rust-analyzer=
** TODO update this by doing an install from a fresh mac/windows machine
